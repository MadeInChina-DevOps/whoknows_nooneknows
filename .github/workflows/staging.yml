name: Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Define PostgreSQL as a service
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    # Set environment variables
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost/postgres

    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Rust toolchain
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy # Add components if needed

      # 3. Install SQLx CLI
      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features native-tls,postgres

      # 4. Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            sqlx database create && break
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      # 5. Run SQLx Migrations
      - name: Run SQLx Migrations
        run: sqlx migrate run
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      # 6. Cache Cargo Registry
      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # 7. Cache Cargo Build
      - name: Cache Cargo Build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      # 8. Build the Application
      - name: Build the application with deploy.sh
        run: |
          chmod +x deploy.sh
          ./deploy.sh

      # 9. Add SSH Private Key to Runner
      - name: Add SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      # 10. Replace Files on the Remote Server
      - name: Replace files on the remote server
        run: |
          rsync -e "ssh -o StrictHostKeyChecking=no" -az --stats --human-readable --delete --progress ./${{ secrets.PKG }}.tar.gz ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ secrets.STAGING_DIR }}

      # 11. Extract and Run the App on the VM
      - name: Extract and run the app on the VM
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ${{ secrets.STAGING_DIR }} &&
            rm -rf migrations templates static ${{ secrets.PKG }} &&
            tar -xzvf ${{ secrets.PKG }}.tar.gz &&
            rm ${{
              secrets.PKG
            }}.tar.gz &&
            sudo rm -rf /var/cache/nginx &&
            sudo mkdir /var/cache/nginx &&
            sudo systemctl restart nginx &&
            sudo systemctl restart ${{ secrets.SERVICE_NAME_STAGING }}.service
          "
