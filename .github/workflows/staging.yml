name: Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SQLX_OFFLINE: "true" # Ensure offline mode is enabled

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y libssl-dev

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Build the application with deploy.sh
        run: sudo chmod +x deploy.sh && ./deploy.sh

      - name: Add the ssh private key to the github action runner
        run: mkdir -p ~/.ssh && echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa

      - name: replace files on the remote server
        run: rsync -e "ssh -o StrictHostKeyChecking=no" -az --stats --human-readable --delete --progress ./${{ secrets.PKG }}.tar.gz ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ secrets.STAGING_DIR }}

      - name: extract and run the app on the VM
        run: ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "cd ${{ secrets.STAGING_DIR }} && rm -rf migrations && rm -rf templates && rm -rf static && tar -xzvf ${{ secrets.PKG }}.tar.gz && rm ${{ secrets.PKG }}.tar.gz && sudo rm -rf /var/cache/nginx && sudo mkdir /var/cache/nginx && sudo systemctl restart nginx && sudo systemctl restart ${{ secrets.SERVICE_NAME_STAGING }}.service"
